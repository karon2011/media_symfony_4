security:
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        #in_memory: { memory: null }
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: username

    role_hierarchy:
        # ROLE_ADMIN: [ROLE_ADMIN_COMMENT, ROLE_ADMIN_ARTICLE, ROLE_ALLOWED_TO_SWITCH]
    encoders:
        App\Entity\User:
            algorithm: auto
            cost: 4
    
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            #anonymous: lazy
            anonymous: true
            guard:
                authenticators:
                    - App\Security\LoginUserAuthenticator
                    # - App\Security\TokenAuthenticator

            # if you want, disable storing the user in the session
            # stateless: true

            form_login:
                login_path: app_login
                check_path: app_login
                csrf_token_generator: security.csrf.token_manager

            logout:
                path: app_logout
                # where to redirect after logout
                target: home

            provider: app_user_provider

            remember_me:
                secret:   '%kernel.secret%'
                lifetime: 3600 # in seconds
            
            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/profile, roles: ROLE_USER }
        # - { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        
        # Or identical to ROLE_USER and if you wanted to force EVERY URL to be protected
        # - { path: ^/, roles: IS_AUTHENTICATED_FULLY }
        # if you wanted to force EVERY URL to be protected
        # - { path: ^/, roles: IS_AUTHENTICATED_REMEMBERED }
